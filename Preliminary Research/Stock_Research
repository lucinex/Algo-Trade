{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Stock_Research","provenance":[],"collapsed_sections":[],"mount_file_id":"1AlfgSXKcUdKS_TxaW2zYMNMs0lwC2uBE","authorship_tag":"ABX9TyNgRiqXLOt/+uXD0Biu3PFf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pDpTv8t88uVN","executionInfo":{"status":"ok","timestamp":1629827235109,"user_tz":-330,"elapsed":10375,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"2e6335c2-9256-4e2f-9b14-f14d89583bef"},"source":["!pip install yfinance\n","import yfinance as yf\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np\n","import torch \n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","\n","from torch.utils.data import DataLoader\n","\n","import torch \n","from torch import nn\n","from torch.utils.data import DataLoader\n","from torchvision import datasets \n","from torchvision.transforms import ToTensor \n","import os\n","from torch import optim\n","from torch.optim import lr_scheduler\n","from torch.utils.data.sampler import SubsetRandomSampler\n","import time\n","\n","\n","if torch.cuda.is_available():\n","  device = \"cuda\"\n","else:\n","  device = \"cpu\"\n","print(f\"available {device} device \")\n","\n","device = torch.device(device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting yfinance\n","  Using cached yfinance-0.1.63-py2.py3-none-any.whl\n","Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.23.0)\n","Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.9)\n","Collecting lxml>=4.5.1\n","  Using cached lxml-4.6.3-cp37-cp37m-manylinux2014_x86_64.whl (6.3 MB)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.1.5)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.19.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24->yfinance) (1.15.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.20->yfinance) (3.0.4)\n","Installing collected packages: lxml, yfinance\n","  Attempting uninstall: lxml\n","    Found existing installation: lxml 4.2.6\n","    Uninstalling lxml-4.2.6:\n","      Successfully uninstalled lxml-4.2.6\n","Successfully installed lxml-4.6.3 yfinance-0.1.63\n","available cuda device \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3y1acPPNRR1W"},"source":["plt.rcParams[\"figure.figsize\"] = (20,8)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q2XdmsfHs1L-"},"source":["path_b1= \"/content/drive/MyDrive/Models/Pytorch/m2.pth\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lTvDQReA3kdy"},"source":["path_b2 = \"/content/drive/MyDrive/Models/Pytorch/n2.pth\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z6cbD3tS63-S"},"source":["def load_latest_model(model, name=\"model.pt\"):\n","    \"\"\"\n","    Helper function for Load model\n","    :param model: current model\n","    :param name: model name\n","    :return: loaded model default model.pt\n","    \"\"\"\n","    model.load_state_dict(torch.load(name))\n","    return model\n","\n","def train(model, train_loader, test_loader,\n","          epochs, optimizer, criterion, scheduler=None,\n","          name=\"model.pth\", path=None):\n","    \"\"\"\n","    Helper function for train model\n","    :param model: current model\n","    :param train_loader: train data loader\n","    :param test_loader: test data loader\n","    :param epochs: number of epoch\n","    :param optimizer: optimizer\n","    :param criterion: loss function\n","    :param scheduler: scheduler, default None\n","    :param name: model name, default model.pt\n","    :param path: model saved location, default None\n","    :return: model, list of train loss and test loss\n","    \"\"\"\n","\n","    # compare overfitted\n","    train_loss_data, valid_loss_data = [], []\n","    # check for validation loss\n","    valid_loss_min = np.Inf\n","    # calculate time\n","    since = time.time()\n","\n","    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","    for epoch in range(epochs):\n","        print(\"Epoch: {}/{}\".format(epoch + 1, epochs))\n","        # monitor training loss\n","        train_loss = 0.0\n","        valid_loss = 0.0\n","        total = 0\n","        \n","        e_since = time.time()\n","\n","        ###################\n","        # train the model #\n","        ###################\n","        model.train()  # prep model for training\n","\n","        for targets, labels in train_loader:\n","            # Move input and label tensors to the default device\n","            targets ,labels = targets.float(), labels.float()\n","            targets, labels = targets.to(device), labels.to(device)\n","            labels = labels.view(-1)\n","            # clear the gradients of all optimized variables\n","            optimizer.zero_grad()\n","            # forward pass: compute predicted outputs by passing inputs to the model\n","            ps = model(targets)\n","            # calculate the loss\n","            loss = criterion(ps, labels)\n","            # backward pass: compute gradient of the loss with respect to model parameters\n","            loss.backward()\n","            # perform a single optimization step (parameter update)\n","            optimizer.step()\n","            # update running training loss\n","            train_loss += loss.item() * targets.size(0)\n","\n","        ######################\n","        # validate the model #\n","        ######################\n","        print(\"\\t\\tGoing for validation\")\n","        model.eval()  # prep model for evaluation\n","        for data, target in test_loader:\n","            # Move input and label tensors to the default device\n","            data, target = data.float(), target.float()\n","            data, target = data.to(device), target.to(device)\n","            target=target.view(-1,1)\n","            # forward pass: compute predicted outputs by passing inputs to the model\n","            output = model(data)\n","            # calculate the loss\n","            loss_p = criterion(output, target)\n","            # update running validation loss\n","            valid_loss += loss_p.item() * data.size(0)\n","            # calculate accuracy\n","            \n","\n","        # print training/validation statistics\n","        # calculate average loss over an epoch\n","        train_loss = train_loss / len(train_loader.dataset)\n","        valid_loss = valid_loss / len(test_loader.dataset)\n","\n","        # calculate train loss and running loss\n","        train_loss_data.append(train_loss * 100)\n","        valid_loss_data.append(valid_loss * 100)\n","\n","        print(\"\\tTrain loss:{:.6f}..\".format(train_loss),\n","              \"\\tValid Loss:{:.6f}..\".format(valid_loss))\n","            #  \"\\tAccuracy: {:.4f}\".format(1/train_loss)\n","\n","        if scheduler is not None:\n","            scheduler.step()  # step up scheduler\n","\n","        # save model if validation loss has decreased\n","        if valid_loss <= valid_loss_min:\n","            print('\\tValidation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n","                valid_loss_min,\n","                valid_loss))\n","            torch.save(model.state_dict(), name)\n","            valid_loss_min = valid_loss\n","            # save to google drive\n","            if path is not None:\n","                torch.save(model.state_dict(), path)\n","\n","        # Time take for one epoch\n","        time_elapsed = time.time() - e_since\n","        print('\\tEpoch:{} completed in {:.0f}m {:.0f}s'.format(\n","            epoch + 1, time_elapsed // 60, time_elapsed % 60))\n","\n","    # compare total time\n","    time_elapsed = time.time() - since\n","    print('Training completed in {:.0f}m {:.0f}s'.format(\n","        time_elapsed // 60, time_elapsed % 60))\n","\n","    # load best model\n","    model = load_latest_model(model, name)\n","\n","    # return the model\n","    return [model, train_loss_data, valid_loss_data]\n","\n","from torch.utils.data import Dataset\n","class CustomTimeSeries(Dataset):\n","    def __init__(self, x,y):\n","        x = np.reshape(x, (x.shape[0],1,x.shape[1],x.shape[2]))\n","        self.features = x.astype(np.float32)\n","        self.labels = y.astype(np.float32)\n","  \n","\n","    def __len__(self):\n","        return len(self.labels)\n","\n","    def __getitem__(self, idx):\n","        x = self.features[idx,:,:]\n","        y = self.labels[idx]\n","        return x, y\n","\n","class StockData():\n","  def __init__(self,ticker,min_max=False):\n","    \n","    self.data = None\n","    self.ticker = ticker\n","    self.download(ticker)\n","    self.transform()\n","    self.RSI(14)\n","    self.ATR(20)\n","    self.ADX(20)\n","    self.data.dropna(inplace=True)\n","    \n","    y = self.data.pop(\"Adj Close\")\n","    \n","    self.data[\"Adj Close\"] = y\n","    print(self.data.columns)\n","    if min_max:\n","      self.min_max_data = MinMaxScaler()\n","      self.min_max_y = MinMaxScaler()\n","      self.min_max_y.fit([self.data['Adj Close']])\n","      self.nddata = self.min_max_data.fit_transform(self.data)\n","      \n","    print(self.nddata)\n","    return \n","\n","  @staticmethod\n","  def train_test_val_split(X,Y,split = 0.1, val = True):\n","    x1,x2,y1,y2 = train_test_split(X, Y, test_size=0.1, shuffle=False)\n","    if val:\n","      x1,x3,y1,y3 = train_test_split(x1, y1, test_size=0.1, shuffle=False)\n","      return x1,x3,x2,y1,y3,y2\n","    else:\n","      return x1,x2,y1,y2\n","\n","  def download(self,ticker,Id=\".NS\"):\n","    if self.data == None:\n","      if type(ticker) == str:\n","        ticker = ticker + Id\n","        self.data = yf.download(ticker)\n","  def transform(self):\n","    \n","    self.data['HL_mid'] = (self.data['High'] + self.data['Low']) / 2\n","    self.data['OC_mid'] = (self.data['Open'] + self.data['Adj Close'])/2\n","    return\n","\n","  def bollingerband(self):\n","    df = self.data.copy()\n","    df[\"MA\"] = df['Adj Close'].rolling(20).mean()\n","    df[\"BB_up\"] = df[\"MA\"] + 2*df[\"MA\"].rolling(20).std()\n","    df[\"BB_dn\"] = df[\"MA\"] - 2*df[\"MA\"].rolling(20).std()\n","    df[\"BB_width\"] = df[\"BB_up\"] - df[\"BB_dn\"]\n","    self.data['MA'] = df['MA']\n","    self.data['BB_width'] = df[\"BB_width\"]\n","    return \n","  def RSI(self,n):\n","    \"function to calculate RSI\"\n","    df = self.data.copy()\n","    df['delta']=df['Adj Close'] - df['Adj Close'].shift(1)\n","    df['gain']=np.where(df['delta']>=0,df['delta'],0)\n","    df['loss']=np.where(df['delta']<0,abs(df['delta']),0)\n","    avg_gain = []\n","    avg_loss = []\n","    gain = df['gain'].tolist()\n","    loss = df['loss'].tolist()\n","    for i in range(len(df)):\n","        if i < n:\n","            avg_gain.append(np.NaN)\n","            avg_loss.append(np.NaN)\n","        elif i == n:\n","            avg_gain.append(df['gain'].rolling(n).mean().tolist()[n])\n","            avg_loss.append(df['loss'].rolling(n).mean().tolist()[n])\n","        elif i > n:\n","            avg_gain.append(((n-1)*avg_gain[i-1] + gain[i])/n)\n","            avg_loss.append(((n-1)*avg_loss[i-1] + loss[i])/n)\n","    df['avg_gain']=np.array(avg_gain)\n","    df['avg_loss']=np.array(avg_loss)\n","    df['RS'] = df['avg_gain']/df['avg_loss']\n","    df['RSI'] = 100 - (100/(1+df['RS']))\n","    self.data['RSI'] = df['RSI']\n","    return \n","  def ATR(self,n):\n","    df = self.data.copy()\n","    df['H-L'] = abs(df['High'] - df['Low'])\n","    df['H-PC']=abs(df['High']- df['Adj Close'].shift(1))\n","    df['L-PC']=abs(df['Low']- df['Adj Close'].shift(1))\n","    df['TR'] = df[['H-L','H-PC','L-PC']].max(axis=1, skipna=False)\n","    self.data['ATR'] = df['TR'].rolling(n).mean()\n","    df2 = df.drop(['H-L','H-PC','L-PC'],axis=1)\n","    self.data['TR'] = df2['TR']\n","    return\n","\n","  def ADX(self,n):\n","    \"function to calculate ADX\"\n","    df2 = self.data.copy()\n","     #the period parameter of ATR function does not matter because period does not influence TR calculation\n","    df2['DMplus']=np.where((df2['High']-df2['High'].shift(1))>(df2['Low'].shift(1)-df2['Low']),df2['High']-df2['High'].shift(1),0)\n","    df2['DMplus']=np.where(df2['DMplus']<0,0,df2['DMplus'])\n","    df2['DMminus']=np.where((df2['Low'].shift(1)-df2['Low'])>(df2['High']-df2['High'].shift(1)),df2['Low'].shift(1)-df2['Low'],0)\n","    df2['DMminus']=np.where(df2['DMminus']<0,0,df2['DMminus'])\n","    TRn = []\n","    DMplusN = []\n","    DMminusN = []\n","    TR = df2['TR'].tolist()\n","    DMplus = df2['DMplus'].tolist()\n","    DMminus = df2['DMminus'].tolist()\n","    for i in range(len(df2)):\n","        if i < n:\n","            TRn.append(np.NaN)\n","            DMplusN.append(np.NaN)\n","            DMminusN.append(np.NaN)\n","        elif i == n:\n","            TRn.append(df2['TR'].rolling(n).sum().tolist()[n])\n","            DMplusN.append(df2['DMplus'].rolling(n).sum().tolist()[n])\n","            DMminusN.append(df2['DMminus'].rolling(n).sum().tolist()[n])\n","        elif i > n:\n","            TRn.append(TRn[i-1] - (TRn[i-1]/14) + TR[i])\n","            DMplusN.append(DMplusN[i-1] - (DMplusN[i-1]/14) + DMplus[i])\n","            DMminusN.append(DMminusN[i-1] - (DMminusN[i-1]/14) + DMminus[i])\n","    df2['TRn'] = np.array(TRn)\n","    df2['DMplusN'] = np.array(DMplusN)\n","    df2['DMminusN'] = np.array(DMminusN)\n","    df2['DIplusN']=100*(df2['DMplusN']/df2['TRn'])\n","    df2['DIminusN']=100*(df2['DMminusN']/df2['TRn'])\n","    df2['DIdiff']=abs(df2['DIplusN']-df2['DIminusN'])\n","    df2['DIsum']=df2['DIplusN']+df2['DIminusN']\n","    df2['DX']=100*(df2['DIdiff']/df2['DIsum'])\n","    ADX = []\n","    DX = df2['DX'].tolist()\n","    for j in range(len(df2)):\n","        if j < 2*n-1:\n","            ADX.append(np.NaN)\n","        elif j == 2*n-1:\n","            ADX.append(df2['DX'][j-n+1:j+1].mean())\n","        elif j > 2*n-1:\n","            ADX.append(((n-1)*ADX[j-1] + DX[j])/n)\n","    self.data['ADX']=np.array(ADX)\n","    return \n","\n","def new_dataset(dataset, step_size):\n","\tdata_X, data_Y = [], []\n","\tfor i in range(dataset.shape[0]-step_size-1):\n","\t\ta = dataset[i:(i+step_size),:-1]\n","\t\tdata_X.append(a)\n","\t\tdata_Y.append(dataset[i + step_size, 1])\n","\treturn np.array(data_X), np.array(data_Y)\n"," \n","def prepare(ticker,min_max=False,batch=32,id=\".NS\"):\n","  data = StockData(ticker=ticker,min_max=min_max)\n","  nddata = data.nddata[:,4:]\n","  x, y = new_dataset(nddata,20)\n","  x_train,x_val,x_test,y_train,y_val, y_test = data.train_test_val_split(x,y)\n","  x_train= x_train[len(x_train)%batch:]\n","  y_train = y_train[len(y_train)%batch:] \n","  x_val = x_val[len(x_val)%batch:]\n","  y_val = y_val[len(y_val)%batch:]\n","  x_test = x_test[len(x_test)%batch:]\n","  y_test = y_test[len(y_test)%batch:]\n","  print(f\"len x_train {x_train.shape}, y_train {len(y_train)}; x_val{x_val.shape}; y val {len(y_val)} ; x test {x_test.shape} y test {len(y_test)}\")\n","  traindata = CustomTimeSeries(x_train,y_train)\n","  train_dataloader = DataLoader(traindata, batch_size=batch, shuffle=False)\n","  valdata = CustomTimeSeries(x_val,y_val)\n","  val_dataloader = DataLoader(valdata, batch_size=batch, shuffle=False)\n","  testdata = CustomTimeSeries(x_test,y_test)\n","  test_dataloader = DataLoader(testdata, batch_size=batch, shuffle=False)\n","  return train_dataloader, val_dataloader, test_dataloader\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_PkAcD6s-yrE"},"source":["def plot_data(model,data):\n","  preds = []\n","  targets = []\n","  for input , target in data:\n","    input , target = input.float(), target.float()\n","    if torch.cuda.is_available():\n","      input, target = input.cuda(),target.cuda()\n","    pred = model(input)\n","    preds = preds + pred.cpu().detach().numpy().tolist()\n","    targets = targets + target.cpu().detach().numpy().tolist()\n","\n","  plt.plot(preds)\n","  plt.plot(targets)\n","\n","def plot_models(model,data):\n","  for i in model:\n","    plot_data(i,data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kN30M_PuXIBr"},"source":["import torch.nn.functional as F\n","from torch.autograd import Variable\n","class tradeloss(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.device = \"cuda:0\" if torch.cuda.is_available() else 'cpu'\n","  def forward(self,y_pred,y_true):\n","    \n","    y_true_next = y_true[1:]\n","    y_pred_next = y_pred[1:]\n","    y_true_tdy = y_true[:-1]\n","    y_pred_tdy = y_pred[:-1]\n","\n","    y_true_diff = y_true_next - y_true_tdy\n","    y_pred_diff = y_pred_next - y_pred_tdy\n","    \n","    standard = torch.zeros_like(y_pred_diff)\n","    y_true_move = torch.gt(y_true_diff,standard)\n","    y_pred_move = torch.gt(y_pred_diff,standard)\n","\n","    condition = torch.ne(y_true_move,y_pred_move)\n","    indices = torch.where(condition)\n","    indices,*y = indices\n","    indices=indices.reshape(-1,1)\n","    ones = torch.ones_like(indices)\n","    \n","    indices = torch.add(indices,ones)\n","    indices =torch.LongTensor(indices.tolist())\n","    direction_loss = Variable(torch.ones_like(y_pred))\n","    alpha =1000*torch.ones([1],dtype=torch.float32,device=self.device)\n","    indices = indices.to(self.device)\n","    direction_loss = direction_loss.index_put_(tuple(indices.t()),alpha)\n","    loss = torch.mean(direction_loss * torch.square(y_true - y_pred))\n","    return loss\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JNb7h-zFyzNT"},"source":["class CNN_LSTM_2(nn.Module):\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    self.lstm_hidden_size = 64\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=7,hidden_size=self.lstm_hidden_size)\n","\n","    self.conv2d = nn.Conv2d(in_channels=1,out_channels=32, kernel_size=(8,1))\n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","    self.conv1d_3 = nn.Sequential(nn.Conv2d(in_channels=1,out_channels=16,kernel_size=()))\n","    self.maxPool2d = nn.MaxPool1d(kernel_size=1)\n","\n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.dropout = nn.Dropout(0.2)\n","    self.dense_1 = nn.Linear(in_features=128, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      \n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.act2(self.conv1d_1(input[:,:,k,:]))\n","        \n","        x = self.act2(self.conv1d_2(x))\n","        \n","        x = self.act2(self.conv1d_2_2(x))\n","        \n","        #x = self.act1(self.conv1d_3(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        hx1 ,cx1 = self.lstm_2(input[:,:,k,:].view(self.batch,input.shape[-1]),(hx1,cx1))\n","        \n","      out = torch.cat((hx1,hx),axis=-1)\n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dYNOFcSg7AtI"},"source":["class CNN_LSTM_2v2(nn.Module):\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.lstm_hidden_size = 128\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=448,hidden_size=self.lstm_hidden_size)\n","\n","    \n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","\n","    self.conv2d = nn.Conv2d(in_channels=1,out_channels=16, kernel_size=(5))\n","    self.conv2d_2 =nn.Conv2d(in_channels=16,out_channels=32, kernel_size=(3))\n","    self.conv_block = nn.Sequential(self.conv2d,self.act1,nn.MaxPool2d(1),nn.Dropout2d(0.2),nn.BatchNorm2d(16))\n","    self.conv_block_2 = nn.Sequential(self.conv2d_2,self.act1,nn.MaxPool2d(1),nn.Dropout2d(0.2),nn.BatchNorm2d(32))\n","\n","    \n","    \n","    self.dropout = nn.Dropout(0.4)\n","    self.dense_1 = nn.Linear(in_features=256, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      v1 = self.conv_block(input)\n","      v1 = self.conv_block_2(v1)\n","      v1 = torch.flatten(v1,start_dim=1,end_dim=-1)\n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.act2(self.conv1d_1(input[:,:,k,:]))\n","        \n","        x = self.act2(self.conv1d_2(x))\n","        \n","        x = self.act2(self.conv1d_2_2(x))\n","        \n","        #x = self.act1(self.conv1d_3(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        hx1 ,cx1 = self.lstm_2(hx,(hx1,cx1))\n","        \n","      out = torch.cat((hx1,hx),axis=-1)\n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ute-II9XXhhJ"},"source":["class CNN_LSTM_2v3(nn.Module):\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.lstm_hidden_size = 64\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=7,hidden_size=self.lstm_hidden_size)\n","\n","    \n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","    self.conv1_block = nn.Sequential(self.conv1d_1,self.act1,nn.BatchNorm1d(32))\n","    self.conv1_block_2 = nn.Sequential(self.conv1d_2,self.act1,nn.BatchNorm1d(64))\n","    self.conv1_block_3 = nn.Sequential(self.conv1d_2_2,self.act1,nn.BatchNorm1d(64))\n","\n","    self.conv2d = nn.Conv2d(in_channels=1,out_channels=16, kernel_size=(3))\n","    self.conv2d_2 =nn.Conv2d(in_channels=16,out_channels=32, kernel_size=(3))\n","    self.conv2d_2a =nn.Conv2d(in_channels=32,out_channels=32, kernel_size=(3))\n","    self.conv2d_2b =nn.Conv2d(in_channels=32,out_channels=64, kernel_size=(8,1))\n","    self.conv_block = nn.Sequential(self.conv2d,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(16))\n","    self.conv_block_2 = nn.Sequential(self.conv2d_2,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(32))\n","    self.conv_block_3 = nn.Sequential(self.conv2d_2a,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(32))\n","    \n","    \n","    \n","    self.dropout = nn.Dropout(0.2)\n","    self.dense_1 = nn.Linear(in_features=576, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      v1 = self.conv_block(input)\n","      v1 = self.conv_block_2(v1)\n","      v1 = self.conv_block_3(v1)\n","      \n","      v3 = torch.flatten(v1,1,-1)\n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.conv1_block(input[:,:,k,:])\n","        \n","        x = self.conv1_block_2(x)\n","        \n","        x = self.conv1_block_3(x)\n","        \n","        #x = self.act1(self.conv1d_3(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        #x = self.act1(self.conv1d_4(x))\n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        hx1 ,cx1 = self.lstm_2(input[:,:,k,:].view(self.batch,input.shape[-1]),(hx1,cx1))\n","      \n","      out = torch.cat((hx1,hx,v3),axis=-1)\n","      \n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zdGgoBI2D4Bb"},"source":["class AdditiveAttention(nn.Module):\n","\n","  def __init__(self, conv_input_size, hidden_state, num_hiddens, dropout, **kwargs):\n","    super(AdditiveAttention, self).__init__(**kwargs)\n","    self.W_k = nn.Linear(conv_input_size, num_hiddens, bias=False)\n","    self.W_q = nn.Linear(hidden_state, num_hiddens, bias=False)\n","    self.w_v = nn.Linear(num_hiddens, conv_input_size, bias=False)\n","    self.dropout = nn.Dropout(dropout)\n","  def forward(self,conv_input,hidden_state):\n","    hidden = torch.unsqueeze(hidden)\n","    hidden = torch.broadcast_to\n","    hidden = self.W_q(hidden_state)\n","    \n","    \n","    \n","    scores = torch.tanh(self.dropout(self.w_v(features)))\n","    softmax = nn.functional.softmax(scores, dim=-1)\n","    \n","    return conv_input*softmax\n","class CNN_LSTM_2v4(nn.Module):   #\"/content/drive/MyDrive/Models/Pytorch/q1.pth\"\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.lstm_hidden_size = 128\n","\n","    self.attention = AdditiveAttention(14,self.lstm_hidden_size,14,0.1)\n","\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=448,hidden_size=self.lstm_hidden_size)\n","\n","    \n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","    self.conv1_block = nn.Sequential(self.conv1d_1,self.act1,nn.BatchNorm1d(32))\n","    self.conv1_block_2 = nn.Sequential(self.conv1d_2,self.act1,nn.BatchNorm1d(64))\n","    self.conv1_block_3 = nn.Sequential(self.conv1d_2_2,self.act1,nn.BatchNorm1d(64))\n","\n","    self.conv2d = nn.Conv2d(in_channels=1,out_channels=16, kernel_size=(3))\n","    self.conv2d_2 =nn.Conv2d(in_channels=16,out_channels=32, kernel_size=(3))\n","    self.conv2d_2a =nn.Conv2d(in_channels=32,out_channels=32, kernel_size=(3))\n","    self.conv2d_2b =nn.Conv2d(in_channels=32,out_channels=64, kernel_size=(8,1))\n","    self.conv_block = nn.Sequential(self.conv2d,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(16))\n","    self.conv_block_2 = nn.Sequential(self.conv2d_2,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(32))\n","    self.conv_block_3 = nn.Sequential(self.conv2d_2a,self.act1,nn.Dropout2d(0.2),nn.BatchNorm2d(32))\n","    \n","    \n","    \n","    self.dropout = nn.Dropout(0.2)\n","    self.dense_1 = nn.Linear(in_features=self.lstm_hidden_size*2, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      v1 = self.conv_block(input)\n","      v1 = self.conv_block_2(v1)\n","      \n","      v1 = self.conv_block_3(v1)\n","      \n","      v3 = torch.squeeze(v1)\n","      print(v3.shape)\n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.conv1_block(input[:,:,k,:])\n","        \n","        x = self.conv1_block_2(x)\n","        \n","        x = self.conv1_block_3(x)\n","        \n","        \n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        a = self.attention(v3,hx)\n","        hx1 ,cx1 = self.lstm_2(a,(hx,cx1))\n","      \n","      out = torch.cat((hx1,hx),axis=-1)\n","      \n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"SK75b2UeTLzS","executionInfo":{"status":"error","timestamp":1629829631307,"user_tz":-330,"elapsed":9,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"84506561-a147-450a-d706-db759676d095"},"source":["model = CNN_LSTM_2v4(32)\n","model.cuda()\n","for inp,tar in triv_train:\n","  inp = inp.float()\n","  inp = inp.cuda()\n","  model(inp)\n","  break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["torch.Size([32, 32, 14])\n","torch.Size([32, 32, 14])\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-f2f8c6c15d53>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0minp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0minp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m   \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1049\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1050\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1051\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1052\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-23dd983eb9eb>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 81\u001b[0;31m         \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mattention\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     82\u001b[0m         \u001b[0mhx1\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mcx1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstm_2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcx1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1049\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1050\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1051\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1052\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-23dd983eb9eb>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, conv_input, hidden_state)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtanh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw_v\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m     \u001b[0msoftmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctional\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'features' is not defined"]}]},{"cell_type":"code","metadata":{"id":"feFiJrGcKAgL"},"source":["class AdditiveAttention_2(nn.Module):\n","\n","  def __init__(self,input_size, hidden_state, num_hiddens, dropout, **kwargs):\n","    super(AdditiveAttention_2, self).__init__(**kwargs)\n","    self.W_k = nn.Linear(140, num_hiddens, bias=False)\n","    self.W_q = nn.Linear(hidden_state, num_hiddens, bias=False)\n","    self.w_v = nn.Linear(num_hiddens, num_hiddens, bias=False)\n","    self.dropout = nn.Dropout(dropout)\n","    self.act = nn.Tanh()\n","  def forward(self,input,hidden_state):\n","    \n","    inp= input.view(32,20*7)\n","    \n","    inp,hidden = self.W_k(inp),self.W_q(hidden_state)   \n","    \n","    features = inp + hidden\n","    \n","    out = self.act(self.dropout(self.w_v(features)))\n","    out = nn.functional.softmax(out)\n","    input = input.reshape([32,20,7])\n","    out = out.reshape([32,20,1])\n","    out = torch.broadcast_to(out,[32,20,7])\n","    \n","    f_out = torch.mul(input, out)\n","    f_out = torch.flatten(f_out,1,-1)\n","    \n","    return f_out\n","class CNN_LSTM_2v5(nn.Module):\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    self.lstm_hidden_size = 64\n","    self.att = AdditiveAttention_2(20,self.lstm_hidden_size,20,0.1)\n","\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=140,hidden_size=self.lstm_hidden_size)\n","\n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","    \n","    self.maxPool2d = nn.MaxPool1d(kernel_size=1)\n","\n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.dropout = nn.Dropout(0.2)\n","    self.dense_1 = nn.Linear(in_features=128, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      \n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.act2(self.conv1d_1(input[:,:,k,:]))\n","        \n","        x = self.act2(self.conv1d_2(x))\n","        \n","        x = self.act2(self.conv1d_2_2(x))\n","        \n","        x2 = self.att(input,hx1)\n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        hx1 ,cx1 = self.lstm_2(x2,(hx1,cx1))\n","        \n","      out = torch.cat((hx1,hx),axis=-1)\n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EtyOFf3xZv__"},"source":["class AdditiveAttention_3(nn.Module):\n","\n","  def __init__(self,input_size, hidden_state, num_hiddens, dropout, **kwargs):\n","    super(AdditiveAttention_3, self).__init__(**kwargs)\n","    self.W_k = nn.Linear(input_size, num_hiddens, bias=False)\n","    self.W_q = nn.Linear(hidden_state, num_hiddens, bias=False)\n","    self.w_v = nn.Linear(num_hiddens, num_hiddens, bias=False)\n","    self.dropout = nn.Dropout(dropout)\n","    self.act = nn.Tanh()\n","    self.softmax = nn.Softmax(dim=-1)\n","  def forward(self,input,hidden_state):\n","    \n","    input= input.view(32,20,7)\n","    \n","    inp = torch.permute(input,dims=[0,2,1])\n","    \n","    inp,hidden = self.W_k(inp),self.W_q(hidden_state)\n","    \n","    hidden = hidden.reshape([32,1,7])\n","    \n","    features = inp + hidden\n","    \n","    features = self.act(features)\n","    out = self.act(self.dropout(self.w_v(features)))\n","    \n","    out = self.softmax(out)\n","    \n","    f_out = torch.bmm(input,out)\n","    \n","    f_out= torch.sum(f_out,1)\n","    \n","    return f_out\n","class CNN_LSTM_2v6(nn.Module): #k\n","  def __init__(self,batch):\n","    super().__init__()\n","    self.batch = batch \n","    \n","    self.lstm_hidden_size = 64\n","    self.att = AdditiveAttention_3(20,self.lstm_hidden_size,7,0.1)\n","\n","    self.lstm = nn.LSTMCell(input_size=64,hidden_size=self.lstm_hidden_size)\n","    self.lstm_2 = nn.LSTMCell(input_size=7,hidden_size=self.lstm_hidden_size)\n","\n","    self.conv1d_1 = nn.Conv1d(in_channels = 1, out_channels= 32, kernel_size=2,dilation=2)\n","    self.conv1d_2 = nn.Conv1d(in_channels = 32, out_channels= 64, kernel_size=2,dilation=3)\n","    self.conv1d_2_2 = nn.Conv1d(in_channels = 64, out_channels= 64, kernel_size=2)\n","    \n","    self.maxPool2d = nn.MaxPool1d(kernel_size=1)\n","\n","    \n","    self.act1 = nn.ReLU()\n","    self.act2 = nn.Tanh()\n","    self.dropout = nn.Dropout(0.2)\n","    self.dense_1 = nn.Linear(in_features=128, out_features=512)\n","    self.dense_2 = nn.Linear(in_features=512, out_features=64)\n","    self.dense_3 = nn.Linear(in_features=64, out_features=1)\n","  def forward(self,input):\n","      \n","      hidden=self.init_hidden()\n","      hidden = self.init_hidden()\n","      hx,cx = hidden\n","      hx1,cx1 = hidden\n","      if torch.cuda.is_available():\n","        hx,cx = hx.cuda(),cx.cuda()\n","        hx1,cx1 = hx1.cuda(),cx1.cuda()\n","      for k in range(input.shape[2]):\n","        x = self.act2(self.conv1d_1(input[:,:,k,:]))\n","        \n","        x = self.act2(self.conv1d_2(x))\n","        \n","        x = self.act2(self.conv1d_2_2(x))\n","        \n","        x2 = self.att(input,hx1)\n","        x = x.view(self.batch,-1)\n","        hx,cx = self.lstm(x,(hx,cx))\n","        hx1 ,cx1 = self.lstm_2(x2,(hx1,cx1))\n","        \n","      out = torch.cat((hx1,hx),axis=-1)\n","      out = self.act1(self.dropout(self.dense_1(out)))\n","      out = self.act1(self.dropout(self.dense_2(out)))\n","      out = self.dense_3(out)\n","      return out\n","  def backward(self, retain_variables=True):\n","        #Why is retain_variables True??\n","        self.loss.backward(retain_variables=retain_variables)\n","        return self.loss\n","  def init_hidden(self):\n","    hidden = (torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True),\n","                   torch.zeros(self.batch,self.lstm_hidden_size ,dtype=torch.float32,requires_grad=True))\n","    return hidden"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xy1vWWymwVX5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629796302643,"user_tz":-330,"elapsed":536,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"31388a2b-8fd4-41d7-9c6b-71933ce8b009"},"source":["model = CNN_LSTM_2v6(32)\n","model.cuda()\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CNN_LSTM_2v6(\n","  (att): AdditiveAttention_3(\n","    (W_k): Linear(in_features=20, out_features=7, bias=False)\n","    (W_q): Linear(in_features=64, out_features=7, bias=False)\n","    (w_v): Linear(in_features=7, out_features=7, bias=False)\n","    (dropout): Dropout(p=0.1, inplace=False)\n","    (act): Tanh()\n","    (softmax): Softmax(dim=-1)\n","  )\n","  (lstm): LSTMCell(64, 64)\n","  (lstm_2): LSTMCell(7, 64)\n","  (conv1d_1): Conv1d(1, 32, kernel_size=(2,), stride=(1,), dilation=(2,))\n","  (conv1d_2): Conv1d(32, 64, kernel_size=(2,), stride=(1,), dilation=(3,))\n","  (conv1d_2_2): Conv1d(64, 64, kernel_size=(2,), stride=(1,))\n","  (maxPool2d): MaxPool1d(kernel_size=1, stride=1, padding=0, dilation=1, ceil_mode=False)\n","  (act1): ReLU()\n","  (act2): Tanh()\n","  (dropout): Dropout(p=0.2, inplace=False)\n","  (dense_1): Linear(in_features=128, out_features=512, bias=True)\n","  (dense_2): Linear(in_features=512, out_features=64, bias=True)\n","  (dense_3): Linear(in_features=64, out_features=1, bias=True)\n",")"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w2iJ2D1nsseX","executionInfo":{"status":"ok","timestamp":1629827707401,"user_tz":-330,"elapsed":555,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"a1f13816-7220-4282-bce7-e233b884b375"},"source":["triv_train ,triv_val , triv_test = prepare(\"MARICO\",True,32)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n","Index(['Open', 'High', 'Low', 'Close', 'Volume', 'HL_mid', 'OC_mid', 'RSI',\n","       'ATR', 'TR', 'ADX', 'Adj Close'],\n","      dtype='object')\n","[[3.81104834e-04 2.44912960e-04 3.91088911e-04 ... 2.92864550e-03\n","  1.76642148e-01 1.85507458e-04]\n"," [3.91690028e-04 2.44912960e-04 4.01951413e-04 ... 1.93699474e-03\n","  1.65980762e-01 1.85507458e-04]\n"," [3.25349693e-04 1.78947954e-04 2.65070272e-04 ... 1.07480580e-03\n","  1.55551951e-01 9.19808284e-05]\n"," ...\n"," [9.52042125e-01 9.82774813e-01 9.66036484e-01 ... 6.01529528e-01\n","  4.44082407e-01 9.83869032e-01]\n"," [9.81765058e-01 9.78785801e-01 9.83626426e-01 ... 3.26620804e-01\n","  4.52908272e-01 9.66454894e-01]\n"," [9.63530116e-01 9.62648477e-01 9.68188485e-01 ... 3.11215906e-01\n","  4.43239170e-01 9.54173322e-01]]\n","len x_train (4672, 20, 7), y_train 4672; x_val(512, 20, 7); y val 512 ; x test (576, 20, 7) y test 576\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2_2Y4R1r1lEG","executionInfo":{"status":"ok","timestamp":1629796517453,"user_tz":-330,"elapsed":213165,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"04776405-9771-4457-f4d2-8c065af7e54d"},"source":["EPOCHS = 60\n","LEARNING_RATE = 1e-3\n","loss_fn = tradeloss()\n","\n","optimizer = torch.optim.Adamax(model.parameters(),lr =LEARNING_RATE )\n","lr_sch= lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1)\n","history1 = train(model, triv_train,triv_val,EPOCHS , optimizer,loss_fn,scheduler=None,\n","          name=\"model20v1.pth\", path=\"/content/drive/MyDrive/Models/Pytorch/k1.pth\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch: 1/60\n","\t\tGoing for validation\n","\tTrain loss:13.672137.. \tValid Loss:0.852468..\n","\tValidation loss decreased (inf --> 0.852468).  Saving model ...\n","\tEpoch:1 completed in 0m 5s\n","Epoch: 2/60\n","\t\tGoing for validation\n","\tTrain loss:9.601524.. \tValid Loss:1.109543..\n","\tEpoch:2 completed in 0m 3s\n","Epoch: 3/60\n","\t\tGoing for validation\n","\tTrain loss:8.497107.. \tValid Loss:1.583966..\n","\tEpoch:3 completed in 0m 4s\n","Epoch: 4/60\n","\t\tGoing for validation\n","\tTrain loss:7.686828.. \tValid Loss:1.312088..\n","\tEpoch:4 completed in 0m 4s\n","Epoch: 5/60\n","\t\tGoing for validation\n","\tTrain loss:6.939502.. \tValid Loss:1.231976..\n","\tEpoch:5 completed in 0m 4s\n","Epoch: 6/60\n","\t\tGoing for validation\n","\tTrain loss:6.282394.. \tValid Loss:1.374298..\n","\tEpoch:6 completed in 0m 4s\n","Epoch: 7/60\n","\t\tGoing for validation\n","\tTrain loss:4.624322.. \tValid Loss:1.327508..\n","\tEpoch:7 completed in 0m 4s\n","Epoch: 8/60\n","\t\tGoing for validation\n","\tTrain loss:3.090485.. \tValid Loss:0.968317..\n","\tEpoch:8 completed in 0m 4s\n","Epoch: 9/60\n","\t\tGoing for validation\n","\tTrain loss:2.529390.. \tValid Loss:0.860363..\n","\tEpoch:9 completed in 0m 4s\n","Epoch: 10/60\n","\t\tGoing for validation\n","\tTrain loss:2.125608.. \tValid Loss:0.876276..\n","\tEpoch:10 completed in 0m 3s\n","Epoch: 11/60\n","\t\tGoing for validation\n","\tTrain loss:1.873757.. \tValid Loss:0.680295..\n","\tValidation loss decreased (0.852468 --> 0.680295).  Saving model ...\n","\tEpoch:11 completed in 0m 4s\n","Epoch: 12/60\n","\t\tGoing for validation\n","\tTrain loss:1.686852.. \tValid Loss:0.468274..\n","\tValidation loss decreased (0.680295 --> 0.468274).  Saving model ...\n","\tEpoch:12 completed in 0m 4s\n","Epoch: 13/60\n","\t\tGoing for validation\n","\tTrain loss:1.615612.. \tValid Loss:0.311264..\n","\tValidation loss decreased (0.468274 --> 0.311264).  Saving model ...\n","\tEpoch:13 completed in 0m 4s\n","Epoch: 14/60\n","\t\tGoing for validation\n","\tTrain loss:1.575917.. \tValid Loss:0.591302..\n","\tEpoch:14 completed in 0m 4s\n","Epoch: 15/60\n","\t\tGoing for validation\n","\tTrain loss:1.534331.. \tValid Loss:0.316043..\n","\tEpoch:15 completed in 0m 4s\n","Epoch: 16/60\n","\t\tGoing for validation\n","\tTrain loss:1.501881.. \tValid Loss:0.305661..\n","\tValidation loss decreased (0.311264 --> 0.305661).  Saving model ...\n","\tEpoch:16 completed in 0m 4s\n","Epoch: 17/60\n","\t\tGoing for validation\n","\tTrain loss:1.451330.. \tValid Loss:0.433459..\n","\tEpoch:17 completed in 0m 3s\n","Epoch: 18/60\n","\t\tGoing for validation\n","\tTrain loss:1.498507.. \tValid Loss:0.295772..\n","\tValidation loss decreased (0.305661 --> 0.295772).  Saving model ...\n","\tEpoch:18 completed in 0m 4s\n","Epoch: 19/60\n","\t\tGoing for validation\n","\tTrain loss:1.369560.. \tValid Loss:0.238919..\n","\tValidation loss decreased (0.295772 --> 0.238919).  Saving model ...\n","\tEpoch:19 completed in 0m 4s\n","Epoch: 20/60\n","\t\tGoing for validation\n","\tTrain loss:1.373348.. \tValid Loss:0.106278..\n","\tValidation loss decreased (0.238919 --> 0.106278).  Saving model ...\n","\tEpoch:20 completed in 0m 4s\n","Epoch: 21/60\n","\t\tGoing for validation\n","\tTrain loss:1.435925.. \tValid Loss:0.399252..\n","\tEpoch:21 completed in 0m 4s\n","Epoch: 22/60\n","\t\tGoing for validation\n","\tTrain loss:1.357256.. \tValid Loss:0.347116..\n","\tEpoch:22 completed in 0m 4s\n","Epoch: 23/60\n","\t\tGoing for validation\n","\tTrain loss:1.433267.. \tValid Loss:0.247669..\n","\tEpoch:23 completed in 0m 4s\n","Epoch: 24/60\n","\t\tGoing for validation\n","\tTrain loss:1.340011.. \tValid Loss:0.078735..\n","\tValidation loss decreased (0.106278 --> 0.078735).  Saving model ...\n","\tEpoch:24 completed in 0m 4s\n","Epoch: 25/60\n","\t\tGoing for validation\n","\tTrain loss:1.531812.. \tValid Loss:0.268659..\n","\tEpoch:25 completed in 0m 4s\n","Epoch: 26/60\n","\t\tGoing for validation\n","\tTrain loss:1.266896.. \tValid Loss:0.132595..\n","\tEpoch:26 completed in 0m 4s\n","Epoch: 27/60\n","\t\tGoing for validation\n","\tTrain loss:1.314683.. \tValid Loss:0.154766..\n","\tEpoch:27 completed in 0m 4s\n","Epoch: 28/60\n","\t\tGoing for validation\n","\tTrain loss:1.321456.. \tValid Loss:0.090239..\n","\tEpoch:28 completed in 0m 4s\n","Epoch: 29/60\n","\t\tGoing for validation\n","\tTrain loss:1.460965.. \tValid Loss:0.312467..\n","\tEpoch:29 completed in 0m 4s\n","Epoch: 30/60\n","\t\tGoing for validation\n","\tTrain loss:1.333313.. \tValid Loss:0.167450..\n","\tEpoch:30 completed in 0m 4s\n","Epoch: 31/60\n","\t\tGoing for validation\n","\tTrain loss:1.392329.. \tValid Loss:0.299802..\n","\tEpoch:31 completed in 0m 3s\n","Epoch: 32/60\n","\t\tGoing for validation\n","\tTrain loss:1.263709.. \tValid Loss:0.167683..\n","\tEpoch:32 completed in 0m 4s\n","Epoch: 33/60\n","\t\tGoing for validation\n","\tTrain loss:1.264892.. \tValid Loss:0.294299..\n","\tEpoch:33 completed in 0m 3s\n","Epoch: 34/60\n","\t\tGoing for validation\n","\tTrain loss:1.295047.. \tValid Loss:0.074610..\n","\tValidation loss decreased (0.078735 --> 0.074610).  Saving model ...\n","\tEpoch:34 completed in 0m 4s\n","Epoch: 35/60\n","\t\tGoing for validation\n","\tTrain loss:1.451105.. \tValid Loss:0.541855..\n","\tEpoch:35 completed in 0m 3s\n","Epoch: 36/60\n","\t\tGoing for validation\n","\tTrain loss:1.280449.. \tValid Loss:0.146363..\n","\tEpoch:36 completed in 0m 4s\n","Epoch: 37/60\n","\t\tGoing for validation\n","\tTrain loss:1.198678.. \tValid Loss:0.335570..\n","\tEpoch:37 completed in 0m 3s\n","Epoch: 38/60\n","\t\tGoing for validation\n","\tTrain loss:1.169552.. \tValid Loss:0.070496..\n","\tValidation loss decreased (0.074610 --> 0.070496).  Saving model ...\n","\tEpoch:38 completed in 0m 4s\n","Epoch: 39/60\n","\t\tGoing for validation\n","\tTrain loss:1.244130.. \tValid Loss:0.176415..\n","\tEpoch:39 completed in 0m 4s\n","Epoch: 40/60\n","\t\tGoing for validation\n","\tTrain loss:1.236305.. \tValid Loss:0.111365..\n","\tEpoch:40 completed in 0m 4s\n","Epoch: 41/60\n","\t\tGoing for validation\n","\tTrain loss:1.346405.. \tValid Loss:0.321133..\n","\tEpoch:41 completed in 0m 3s\n","Epoch: 42/60\n","\t\tGoing for validation\n","\tTrain loss:1.285688.. \tValid Loss:0.115258..\n","\tEpoch:42 completed in 0m 4s\n","Epoch: 43/60\n","\t\tGoing for validation\n","\tTrain loss:1.265395.. \tValid Loss:0.246592..\n","\tEpoch:43 completed in 0m 4s\n","Epoch: 44/60\n","\t\tGoing for validation\n","\tTrain loss:1.171122.. \tValid Loss:0.148401..\n","\tEpoch:44 completed in 0m 3s\n","Epoch: 45/60\n","\t\tGoing for validation\n","\tTrain loss:1.181629.. \tValid Loss:0.093443..\n","\tEpoch:45 completed in 0m 3s\n","Epoch: 46/60\n","\t\tGoing for validation\n","\tTrain loss:1.197339.. \tValid Loss:0.116842..\n","\tEpoch:46 completed in 0m 3s\n","Epoch: 47/60\n","\t\tGoing for validation\n","\tTrain loss:1.312863.. \tValid Loss:0.257412..\n","\tEpoch:47 completed in 0m 4s\n","Epoch: 48/60\n","\t\tGoing for validation\n","\tTrain loss:1.188305.. \tValid Loss:0.088464..\n","\tEpoch:48 completed in 0m 4s\n","Epoch: 49/60\n","\t\tGoing for validation\n","\tTrain loss:1.121793.. \tValid Loss:0.328707..\n","\tEpoch:49 completed in 0m 3s\n","Epoch: 50/60\n","\t\tGoing for validation\n","\tTrain loss:1.166870.. \tValid Loss:0.085457..\n","\tEpoch:50 completed in 0m 3s\n","Epoch: 51/60\n","\t\tGoing for validation\n","\tTrain loss:1.173668.. \tValid Loss:0.251712..\n","\tEpoch:51 completed in 0m 4s\n","Epoch: 52/60\n","\t\tGoing for validation\n","\tTrain loss:1.143239.. \tValid Loss:0.125503..\n","\tEpoch:52 completed in 0m 4s\n","Epoch: 53/60\n","\t\tGoing for validation\n","\tTrain loss:1.106437.. \tValid Loss:0.175514..\n","\tEpoch:53 completed in 0m 4s\n","Epoch: 54/60\n","\t\tGoing for validation\n","\tTrain loss:1.109639.. \tValid Loss:0.057070..\n","\tValidation loss decreased (0.070496 --> 0.057070).  Saving model ...\n","\tEpoch:54 completed in 0m 4s\n","Epoch: 55/60\n","\t\tGoing for validation\n","\tTrain loss:1.185313.. \tValid Loss:0.220803..\n","\tEpoch:55 completed in 0m 4s\n","Epoch: 56/60\n","\t\tGoing for validation\n","\tTrain loss:1.149943.. \tValid Loss:0.172432..\n","\tEpoch:56 completed in 0m 3s\n","Epoch: 57/60\n","\t\tGoing for validation\n","\tTrain loss:1.107311.. \tValid Loss:0.152504..\n","\tEpoch:57 completed in 0m 3s\n","Epoch: 58/60\n","\t\tGoing for validation\n","\tTrain loss:1.171463.. \tValid Loss:0.260534..\n","\tEpoch:58 completed in 0m 3s\n","Epoch: 59/60\n","\t\tGoing for validation\n","\tTrain loss:1.125755.. \tValid Loss:0.151469..\n","\tEpoch:59 completed in 0m 4s\n","Epoch: 60/60\n","\t\tGoing for validation\n","\tTrain loss:1.226995.. \tValid Loss:0.437228..\n","\tEpoch:60 completed in 0m 3s\n","Training completed in 3m 33s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OsiP2UtaT3zU"},"source":["model,l1,l2 =history1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"H7-0rOK6JAp5","executionInfo":{"status":"ok","timestamp":1629796607990,"user_tz":-330,"elapsed":779,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"b4732d3f-db8c-4771-9fc9-cf56ce85fa63"},"source":["plot_data(model,triv_test)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gNxoHPyDJkTS","colab":{"base_uri":"https://localhost:8080/","height":381},"executionInfo":{"status":"error","timestamp":1629725690891,"user_tz":-330,"elapsed":1428,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"22b5b58a-bdf3-44f1-d984-438f7f9998dc"},"source":["model2 = CNN_LSTM_2(32)\n","model2.cuda()\n","load_latest_model(model2, name=\"/content/drive/MyDrive/Models/Pytorch/m2.pth\")\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-ad2fed122dfc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCNN_LSTM_2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mload_latest_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"/content/drive/MyDrive/Models/Pytorch/m2.pth\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-2-5aa84686e472>\u001b[0m in \u001b[0;36mload_latest_model\u001b[0;34m(model, name)\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;34m:\u001b[0m\u001b[0;32mreturn\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mloaded\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0mdefault\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \"\"\"\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36mload_state_dict\u001b[0;34m(self, state_dict, strict)\u001b[0m\n\u001b[1;32m   1405\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msgs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1406\u001b[0m             raise RuntimeError('Error(s) in loading state_dict for {}:\\n\\t{}'.format(\n\u001b[0;32m-> 1407\u001b[0;31m                                self.__class__.__name__, \"\\n\\t\".join(error_msgs)))\n\u001b[0m\u001b[1;32m   1408\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_IncompatibleKeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmissing_keys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munexpected_keys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Error(s) in loading state_dict for CNN_LSTM_2:\n\tMissing key(s) in state_dict: \"conv1d_3.0.weight\", \"conv1d_3.0.bias\". \n\tUnexpected key(s) in state_dict: \"conv1d_4.weight\", \"conv1d_4.bias\", \"conv1d_3.weight\", \"conv1d_3.bias\". "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"u84TyiTgHpz6","executionInfo":{"status":"error","timestamp":1629726345957,"user_tz":-330,"elapsed":242398,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"aa15032c-39dd-44e7-cabb-4392b45ab998"},"source":["EPOCHS = 40\n","path2= \"/content/drive/MyDrive/Models/Pytorch/m2.pth\"\n","c_train ,c_val ,c_test = prepare(\"TATAMOTORS\",True,32)\n","model2 = CNN_LSTM_2(32)\n","model2.cuda()\n","optimizer = torch.optim.Adamax(model2.parameters(),lr =1e-3 )\n","loss_fn = tradeloss()\n","history = train(model2, c_train,c_val,EPOCHS , optimizer,loss_fn,scheduler=None,\n","          name=\"model20v1.pth\", path=path2)\n","model2,l1,l2 = history\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n","Index(['Open', 'High', 'Low', 'Close', 'Volume', 'HL_mid', 'OC_mid', 'RSI',\n","       'ATR', 'TR', 'ADX', 'Adj Close'],\n","      dtype='object')\n","[[0.11499185 0.11747375 0.11767422 ... 0.35203122 0.23694981 0.08553246]\n"," [0.11858637 0.12037593 0.11966056 ... 0.35459151 0.23772296 0.08780293]\n"," [0.12167667 0.12069839 0.11689624 ... 0.33732024 0.22888719 0.08310667]\n"," ...\n"," [0.48512412 0.48146202 0.48643732 ... 0.07472104 0.23924559 0.48276842]\n"," [0.47256255 0.46959873 0.46639739 ... 0.18330704 0.25048961 0.46535992]\n"," [0.46865829 0.46556011 0.45603191 ... 0.19763406 0.2675874  0.45491483]]\n","len x_train (5152, 20, 7), y_train 5152; x_val(544, 20, 7); y val 544 ; x test (608, 20, 7) y test 608\n","Epoch: 1/40\n","\t\tGoing for validation\n","\tTrain loss:11.643378.. \tValid Loss:11.810196..\n","\tValidation loss decreased (inf --> 11.810196).  Saving model ...\n","\tEpoch:1 completed in 0m 6s\n","Epoch: 2/40\n","\t\tGoing for validation\n","\tTrain loss:20.104670.. \tValid Loss:11.259860..\n","\tValidation loss decreased (11.810196 --> 11.259860).  Saving model ...\n","\tEpoch:2 completed in 0m 6s\n","Epoch: 3/40\n","\t\tGoing for validation\n","\tTrain loss:24.850070.. \tValid Loss:8.895338..\n","\tValidation loss decreased (11.259860 --> 8.895338).  Saving model ...\n","\tEpoch:3 completed in 0m 6s\n","Epoch: 4/40\n","\t\tGoing for validation\n","\tTrain loss:28.447159.. \tValid Loss:13.143380..\n","\tEpoch:4 completed in 0m 6s\n","Epoch: 5/40\n","\t\tGoing for validation\n","\tTrain loss:33.986414.. \tValid Loss:10.678511..\n","\tEpoch:5 completed in 0m 6s\n","Epoch: 6/40\n","\t\tGoing for validation\n","\tTrain loss:20.477107.. \tValid Loss:2.908781..\n","\tValidation loss decreased (8.895338 --> 2.908781).  Saving model ...\n","\tEpoch:6 completed in 0m 6s\n","Epoch: 7/40\n","\t\tGoing for validation\n","\tTrain loss:9.843037.. \tValid Loss:1.544900..\n","\tValidation loss decreased (2.908781 --> 1.544900).  Saving model ...\n","\tEpoch:7 completed in 0m 6s\n","Epoch: 8/40\n","\t\tGoing for validation\n","\tTrain loss:5.978420.. \tValid Loss:0.876054..\n","\tValidation loss decreased (1.544900 --> 0.876054).  Saving model ...\n","\tEpoch:8 completed in 0m 6s\n","Epoch: 9/40\n","\t\tGoing for validation\n","\tTrain loss:4.188651.. \tValid Loss:0.718862..\n","\tValidation loss decreased (0.876054 --> 0.718862).  Saving model ...\n","\tEpoch:9 completed in 0m 6s\n","Epoch: 10/40\n","\t\tGoing for validation\n","\tTrain loss:2.705158.. \tValid Loss:0.540223..\n","\tValidation loss decreased (0.718862 --> 0.540223).  Saving model ...\n","\tEpoch:10 completed in 0m 6s\n","Epoch: 11/40\n","\t\tGoing for validation\n","\tTrain loss:2.288496.. \tValid Loss:0.999965..\n","\tEpoch:11 completed in 0m 6s\n","Epoch: 12/40\n","\t\tGoing for validation\n","\tTrain loss:1.990310.. \tValid Loss:0.500372..\n","\tValidation loss decreased (0.540223 --> 0.500372).  Saving model ...\n","\tEpoch:12 completed in 0m 6s\n","Epoch: 13/40\n","\t\tGoing for validation\n","\tTrain loss:1.903891.. \tValid Loss:0.284181..\n","\tValidation loss decreased (0.500372 --> 0.284181).  Saving model ...\n","\tEpoch:13 completed in 0m 6s\n","Epoch: 14/40\n","\t\tGoing for validation\n","\tTrain loss:1.803231.. \tValid Loss:0.133776..\n","\tValidation loss decreased (0.284181 --> 0.133776).  Saving model ...\n","\tEpoch:14 completed in 0m 6s\n","Epoch: 15/40\n","\t\tGoing for validation\n","\tTrain loss:1.733303.. \tValid Loss:0.874313..\n","\tEpoch:15 completed in 0m 6s\n","Epoch: 16/40\n","\t\tGoing for validation\n","\tTrain loss:1.970865.. \tValid Loss:0.595688..\n","\tEpoch:16 completed in 0m 6s\n","Epoch: 17/40\n","\t\tGoing for validation\n","\tTrain loss:1.729135.. \tValid Loss:0.310851..\n","\tEpoch:17 completed in 0m 6s\n","Epoch: 18/40\n","\t\tGoing for validation\n","\tTrain loss:1.640799.. \tValid Loss:0.257731..\n","\tEpoch:18 completed in 0m 6s\n","Epoch: 19/40\n","\t\tGoing for validation\n","\tTrain loss:1.839879.. \tValid Loss:0.282026..\n","\tEpoch:19 completed in 0m 6s\n","Epoch: 20/40\n","\t\tGoing for validation\n","\tTrain loss:1.763973.. \tValid Loss:0.514408..\n","\tEpoch:20 completed in 0m 6s\n","Epoch: 21/40\n","\t\tGoing for validation\n","\tTrain loss:1.575200.. \tValid Loss:0.242224..\n","\tEpoch:21 completed in 0m 6s\n","Epoch: 22/40\n","\t\tGoing for validation\n","\tTrain loss:1.647711.. \tValid Loss:0.226642..\n","\tEpoch:22 completed in 0m 6s\n","Epoch: 23/40\n","\t\tGoing for validation\n","\tTrain loss:1.617193.. \tValid Loss:0.357499..\n","\tEpoch:23 completed in 0m 6s\n","Epoch: 24/40\n","\t\tGoing for validation\n","\tTrain loss:1.735334.. \tValid Loss:0.191022..\n","\tEpoch:24 completed in 0m 6s\n","Epoch: 25/40\n","\t\tGoing for validation\n","\tTrain loss:1.831017.. \tValid Loss:0.231136..\n","\tEpoch:25 completed in 0m 6s\n","Epoch: 26/40\n","\t\tGoing for validation\n","\tTrain loss:1.568872.. \tValid Loss:0.341597..\n","\tEpoch:26 completed in 0m 6s\n","Epoch: 27/40\n","\t\tGoing for validation\n","\tTrain loss:1.472419.. \tValid Loss:0.382389..\n","\tEpoch:27 completed in 0m 6s\n","Epoch: 28/40\n","\t\tGoing for validation\n","\tTrain loss:1.615643.. \tValid Loss:0.738124..\n","\tEpoch:28 completed in 0m 6s\n","Epoch: 29/40\n","\t\tGoing for validation\n","\tTrain loss:1.450379.. \tValid Loss:0.158186..\n","\tEpoch:29 completed in 0m 6s\n","Epoch: 30/40\n","\t\tGoing for validation\n","\tTrain loss:1.558881.. \tValid Loss:0.356348..\n","\tEpoch:30 completed in 0m 6s\n","Epoch: 31/40\n","\t\tGoing for validation\n","\tTrain loss:1.431512.. \tValid Loss:0.171082..\n","\tEpoch:31 completed in 0m 6s\n","Epoch: 32/40\n","\t\tGoing for validation\n","\tTrain loss:1.388557.. \tValid Loss:0.209553..\n","\tEpoch:32 completed in 0m 6s\n","Epoch: 33/40\n","\t\tGoing for validation\n","\tTrain loss:1.479549.. \tValid Loss:0.236310..\n","\tEpoch:33 completed in 0m 6s\n","Epoch: 34/40\n","\t\tGoing for validation\n","\tTrain loss:1.466862.. \tValid Loss:0.382790..\n","\tEpoch:34 completed in 0m 6s\n","Epoch: 35/40\n","\t\tGoing for validation\n","\tTrain loss:1.384375.. \tValid Loss:0.165431..\n","\tEpoch:35 completed in 0m 6s\n","Epoch: 36/40\n","\t\tGoing for validation\n","\tTrain loss:1.345178.. \tValid Loss:0.540054..\n","\tEpoch:36 completed in 0m 6s\n","Epoch: 37/40\n","\t\tGoing for validation\n","\tTrain loss:1.425269.. \tValid Loss:0.171427..\n","\tEpoch:37 completed in 0m 6s\n","Epoch: 38/40\n","\t\tGoing for validation\n","\tTrain loss:1.511410.. \tValid Loss:0.314565..\n","\tEpoch:38 completed in 0m 6s\n","Epoch: 39/40\n","\t\tGoing for validation\n","\tTrain loss:1.411275.. \tValid Loss:0.361087..\n","\tEpoch:39 completed in 0m 6s\n","Epoch: 40/40\n","\t\tGoing for validation\n","\tTrain loss:1.354382.. \tValid Loss:0.208065..\n","\tEpoch:40 completed in 0m 6s\n","Training completed in 4m 1s\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-91368bdc17af>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m           name=\"model20v1.pth\", path=path2)\n\u001b[1;32m     10\u001b[0m \u001b[0mmodel4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ml1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ml2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mplot_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'plot_test' is not defined"]}]},{"cell_type":"code","metadata":{"id":"PrApUAIQQvtF"},"source":["model2,l1,l2 = history"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"1IOv1Eh5IVhX","executionInfo":{"status":"ok","timestamp":1629726392773,"user_tz":-330,"elapsed":936,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"05d31c78-ed68-4a68-e0b1-856837f15f78"},"source":["plt.plot(l1)\n","plt.plot(l2)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f0ff9ad2fd0>]"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"-3zguE42puCD","executionInfo":{"status":"ok","timestamp":1629726536289,"user_tz":-330,"elapsed":2235,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"a4af7269-847d-4b6c-e50f-b9f40328c6d1"},"source":["def plot_models(model,data):\n","  for i in model:\n","    plot_data(i,data)\n","es = [model2,model]\n","plot_models(es,c_test)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"i7QYIXjBo0bn","executionInfo":{"status":"ok","timestamp":1629455267169,"user_tz":-330,"elapsed":1592,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"38a101a7-3210-482a-f88f-02c6eb3933e6"},"source":["\n","plot_test(model4,c_test)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"NgtD7aTsR_mc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629735506687,"user_tz":-330,"elapsed":401,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"39c56eb7-e48b-44c0-9120-22c87006bd94"},"source":["model2 = CNN_LSTM_2(32)\n","#model2.cuda()\n","model2.load_state_dict(torch.load(\"/content/drive/MyDrive/Models/Pytorch/m2.pth\",map_location=torch.device('cpu')))\n","model = CNN_LSTM_2v5(32)\n","#model.cuda()\n","model.load_state_dict(torch.load(\"/content/drive/MyDrive/Models/Pytorch/q1.pth\",map_location=torch.device('cpu')))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"7FYA1mf7Ym7X"},"source":["model3 = model\n","model4= model2\n","for para in model3.parameters():\n","  para.requires_grad = False\n","for para in model4.parameters():\n","  para.requires_grad = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"miwKIgIqjn27"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qxuxp1PWwYSH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pwjsEp188LJF"},"source":["class EnsembleLearners(nn.Module):\n","  def __init__(self,modelA,modelB,batch):\n","    super(EnsembleLearners,self).__init__()\n","    self.batch=batch\n","    self.device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    \n","    self.lstm_hidden=4\n","    self.modelA = modelA\n","    self.modelB = modelB\n","\n","    self.lstm = nn.LSTM(input_size=2,hidden_size=self.lstm_hidden,num_layers=32,batch_first=True)\n","    self.dense1 = nn.Linear(in_features=self.lstm_hidden,out_features =16)\n","    self.act = nn.ReLU()\n","    \n","  def forward(self,input):\n","    x1= self.modelA(input)\n","    x2 = self.modelB(input)\n","    x3 = torch.cat([x1,x2],dim=-1)\n","    x3 = x3.view([1,32,2])\n","    x3 \n","    hidden=self.init_hidden()\n","    \n","    out,hidden = self.lstm(x3,hidden)\n","    \n","    out = self.dense1(out)  \n","    out = out.reshape([32,1])\n","    \n","    return out\n","  def init_hidden(self):\n","    hx = torch.zeros(32,self.batch,self.lstm_hidden ,dtype=torch.float32,requires_grad=True)\n","    cx  =torch.zeros(32,self.batch,self.lstm_hidden ,dtype=torch.float32,requires_grad=True)\n","    if torch.cuda.is_available():\n","      hx,cx = hx.cuda(),cx.cuda()\n","    \n","    return (hx,cx)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RxJZK8-VW6NN"},"source":["ensemble= EnsembleLearners(model3,model4,1)\n","if torch.cuda.is_available():\n","  ensemble.cuda()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZRf2vb_KwyBh"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n5p_psQpZWYL","executionInfo":{"status":"ok","timestamp":1629735298924,"user_tz":-330,"elapsed":387627,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"5a39b11f-4f82-453c-c20e-be985c346d4a"},"source":["EPOCHS = 40\n","path= \"/content/drive/MyDrive/Models/Pytorch/k2.pth\"\n","c_train ,c_val ,c_test = prepare(\"TATAMOTORS\",True,32)\n","\n","optimizer = torch.optim.Adamax(ensemble.parameters(),lr =1e-3 )\n","loss_fn = tradeloss()\n","history = train(ensemble2, c_train,c_val,EPOCHS , optimizer,loss_fn,scheduler=None,\n","          name=\"model20v1.pth\", path=path)\n","ensemble,l1,l2 = history"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n","Index(['Open', 'High', 'Low', 'Close', 'Volume', 'HL_mid', 'OC_mid', 'RSI',\n","       'ATR', 'TR', 'ADX', 'Adj Close'],\n","      dtype='object')\n","[[0.11499185 0.11747375 0.11767422 ... 0.35203122 0.23694981 0.08553246]\n"," [0.11858637 0.12037593 0.11966056 ... 0.35459151 0.23772296 0.08780293]\n"," [0.12167667 0.12069839 0.11689624 ... 0.33732024 0.22888719 0.08310667]\n"," ...\n"," [0.48512412 0.48146202 0.48643732 ... 0.07472104 0.23924559 0.48276842]\n"," [0.47256255 0.46959873 0.46639739 ... 0.18330704 0.25048961 0.46535992]\n"," [0.46865829 0.46556011 0.45603191 ... 0.19763406 0.2675874  0.45491483]]\n","len x_train (5152, 20, 7), y_train 5152; x_val(544, 20, 7); y val 544 ; x test (608, 20, 7) y test 608\n","Epoch: 1/40\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"stream","text":["\t\tGoing for validation\n","\tTrain loss:63.344605.. \tValid Loss:104.721325..\n","\tValidation loss decreased (inf --> 104.721325).  Saving model ...\n","\tEpoch:1 completed in 0m 10s\n","Epoch: 2/40\n","\t\tGoing for validation\n","\tTrain loss:55.589130.. \tValid Loss:92.078961..\n","\tValidation loss decreased (104.721325 --> 92.078961).  Saving model ...\n","\tEpoch:2 completed in 0m 10s\n","Epoch: 3/40\n","\t\tGoing for validation\n","\tTrain loss:49.197934.. \tValid Loss:80.028582..\n","\tValidation loss decreased (92.078961 --> 80.028582).  Saving model ...\n","\tEpoch:3 completed in 0m 10s\n","Epoch: 4/40\n","\t\tGoing for validation\n","\tTrain loss:43.225466.. \tValid Loss:69.305482..\n","\tValidation loss decreased (80.028582 --> 69.305482).  Saving model ...\n","\tEpoch:4 completed in 0m 10s\n","Epoch: 5/40\n","\t\tGoing for validation\n","\tTrain loss:37.939526.. \tValid Loss:59.740894..\n","\tValidation loss decreased (69.305482 --> 59.740894).  Saving model ...\n","\tEpoch:5 completed in 0m 10s\n","Epoch: 6/40\n","\t\tGoing for validation\n","\tTrain loss:33.069599.. \tValid Loss:50.517732..\n","\tValidation loss decreased (59.740894 --> 50.517732).  Saving model ...\n","\tEpoch:6 completed in 0m 10s\n","Epoch: 7/40\n","\t\tGoing for validation\n","\tTrain loss:28.595153.. \tValid Loss:42.110928..\n","\tValidation loss decreased (50.517732 --> 42.110928).  Saving model ...\n","\tEpoch:7 completed in 0m 10s\n","Epoch: 8/40\n","\t\tGoing for validation\n","\tTrain loss:24.117625.. \tValid Loss:34.227797..\n","\tValidation loss decreased (42.110928 --> 34.227797).  Saving model ...\n","\tEpoch:8 completed in 0m 10s\n","Epoch: 9/40\n","\t\tGoing for validation\n","\tTrain loss:20.187480.. \tValid Loss:27.808868..\n","\tValidation loss decreased (34.227797 --> 27.808868).  Saving model ...\n","\tEpoch:9 completed in 0m 10s\n","Epoch: 10/40\n","\t\tGoing for validation\n","\tTrain loss:16.689139.. \tValid Loss:22.110757..\n","\tValidation loss decreased (27.808868 --> 22.110757).  Saving model ...\n","\tEpoch:10 completed in 0m 10s\n","Epoch: 11/40\n","\t\tGoing for validation\n","\tTrain loss:13.700109.. \tValid Loss:17.037841..\n","\tValidation loss decreased (22.110757 --> 17.037841).  Saving model ...\n","\tEpoch:11 completed in 0m 10s\n","Epoch: 12/40\n","\t\tGoing for validation\n","\tTrain loss:10.904038.. \tValid Loss:12.821245..\n","\tValidation loss decreased (17.037841 --> 12.821245).  Saving model ...\n","\tEpoch:12 completed in 0m 10s\n","Epoch: 13/40\n","\t\tGoing for validation\n","\tTrain loss:8.261378.. \tValid Loss:9.241966..\n","\tValidation loss decreased (12.821245 --> 9.241966).  Saving model ...\n","\tEpoch:13 completed in 0m 10s\n","Epoch: 14/40\n","\t\tGoing for validation\n","\tTrain loss:6.383299.. \tValid Loss:6.253804..\n","\tValidation loss decreased (9.241966 --> 6.253804).  Saving model ...\n","\tEpoch:14 completed in 0m 10s\n","Epoch: 15/40\n","\t\tGoing for validation\n","\tTrain loss:4.799945.. \tValid Loss:3.988939..\n","\tValidation loss decreased (6.253804 --> 3.988939).  Saving model ...\n","\tEpoch:15 completed in 0m 10s\n","Epoch: 16/40\n","\t\tGoing for validation\n","\tTrain loss:3.725967.. \tValid Loss:2.406707..\n","\tValidation loss decreased (3.988939 --> 2.406707).  Saving model ...\n","\tEpoch:16 completed in 0m 10s\n","Epoch: 17/40\n","\t\tGoing for validation\n","\tTrain loss:2.848440.. \tValid Loss:1.308418..\n","\tValidation loss decreased (2.406707 --> 1.308418).  Saving model ...\n","\tEpoch:17 completed in 0m 10s\n","Epoch: 18/40\n","\t\tGoing for validation\n","\tTrain loss:2.262706.. \tValid Loss:0.617137..\n","\tValidation loss decreased (1.308418 --> 0.617137).  Saving model ...\n","\tEpoch:18 completed in 0m 10s\n","Epoch: 19/40\n","\t\tGoing for validation\n","\tTrain loss:1.738988.. \tValid Loss:0.271439..\n","\tValidation loss decreased (0.617137 --> 0.271439).  Saving model ...\n","\tEpoch:19 completed in 0m 10s\n","Epoch: 20/40\n","\t\tGoing for validation\n","\tTrain loss:1.573720.. \tValid Loss:0.136838..\n","\tValidation loss decreased (0.271439 --> 0.136838).  Saving model ...\n","\tEpoch:20 completed in 0m 10s\n","Epoch: 21/40\n","\t\tGoing for validation\n","\tTrain loss:1.483084.. \tValid Loss:0.099127..\n","\tValidation loss decreased (0.136838 --> 0.099127).  Saving model ...\n","\tEpoch:21 completed in 0m 10s\n","Epoch: 22/40\n","\t\tGoing for validation\n","\tTrain loss:1.508096.. \tValid Loss:0.108146..\n","\tEpoch:22 completed in 0m 10s\n","Epoch: 23/40\n","\t\tGoing for validation\n","\tTrain loss:1.482571.. \tValid Loss:0.126208..\n","\tEpoch:23 completed in 0m 10s\n","Epoch: 24/40\n","\t\tGoing for validation\n","\tTrain loss:1.473165.. \tValid Loss:0.137535..\n","\tEpoch:24 completed in 0m 10s\n","Epoch: 25/40\n","\t\tGoing for validation\n","\tTrain loss:1.376077.. \tValid Loss:0.130288..\n","\tEpoch:25 completed in 0m 10s\n","Epoch: 26/40\n","\t\tGoing for validation\n","\tTrain loss:1.497722.. \tValid Loss:0.121080..\n","\tEpoch:26 completed in 0m 10s\n","Epoch: 27/40\n","\t\tGoing for validation\n","\tTrain loss:1.332749.. \tValid Loss:0.141117..\n","\tEpoch:27 completed in 0m 10s\n","Epoch: 28/40\n","\t\tGoing for validation\n","\tTrain loss:1.378935.. \tValid Loss:0.151310..\n","\tEpoch:28 completed in 0m 10s\n","Epoch: 29/40\n","\t\tGoing for validation\n","\tTrain loss:1.411599.. \tValid Loss:0.146668..\n","\tEpoch:29 completed in 0m 10s\n","Epoch: 30/40\n","\t\tGoing for validation\n","\tTrain loss:1.429652.. \tValid Loss:0.126481..\n","\tEpoch:30 completed in 0m 10s\n","Epoch: 31/40\n","\t\tGoing for validation\n","\tTrain loss:1.456907.. \tValid Loss:0.145844..\n","\tEpoch:31 completed in 0m 9s\n","Epoch: 32/40\n","\t\tGoing for validation\n","\tTrain loss:1.395651.. \tValid Loss:0.140236..\n","\tEpoch:32 completed in 0m 10s\n","Epoch: 33/40\n","\t\tGoing for validation\n","\tTrain loss:1.422249.. \tValid Loss:0.157122..\n","\tEpoch:33 completed in 0m 10s\n","Epoch: 34/40\n","\t\tGoing for validation\n","\tTrain loss:1.410678.. \tValid Loss:0.150502..\n","\tEpoch:34 completed in 0m 9s\n","Epoch: 35/40\n","\t\tGoing for validation\n","\tTrain loss:1.420271.. \tValid Loss:0.142590..\n","\tEpoch:35 completed in 0m 10s\n","Epoch: 36/40\n","\t\tGoing for validation\n","\tTrain loss:1.447865.. \tValid Loss:0.136223..\n","\tEpoch:36 completed in 0m 10s\n","Epoch: 37/40\n","\t\tGoing for validation\n","\tTrain loss:1.415803.. \tValid Loss:0.127280..\n","\tEpoch:37 completed in 0m 10s\n","Epoch: 38/40\n","\t\tGoing for validation\n","\tTrain loss:1.450804.. \tValid Loss:0.131064..\n","\tEpoch:38 completed in 0m 10s\n","Epoch: 39/40\n","\t\tGoing for validation\n","\tTrain loss:1.365781.. \tValid Loss:0.138495..\n","\tEpoch:39 completed in 0m 10s\n","Epoch: 40/40\n","\t\tGoing for validation\n","\tTrain loss:1.390180.. \tValid Loss:0.140298..\n","\tEpoch:40 completed in 0m 10s\n","Training completed in 6m 27s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"H3JU1AknZjnW","executionInfo":{"status":"ok","timestamp":1629735335121,"user_tz":-330,"elapsed":2075,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"a05a542e-0e56-4881-ac9f-c3453c878ed0"},"source":["es = [ensemble]\n","plot_models(es,triv_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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s0PCQojsd9IEUIndwSM/bSLQy4V/Dm5RffGJiFRClUAiIiIiIiJnKmktFGdDZP+TnvbhogR2pOTy6fiO+Ho4V1NwIiKVUyWQiIiIiIjImYqfCxYrNO5zwlPS84r5cPFuBsWEaBKYiNQKSgKJiIiIiIicqfi5EN4J3E/c5Pm9hQkUlNh5dFDTagxMROTElAQSERERERE5E3mpcHDDSbeCJWUV8tWKfYzqEE5ksHc1BicicmJKAomIiIiIiJyJ3QvMj5H9TnjK//7cCRZ4oH90NQUlInJqSgKJiIiIiIicifi54BEA9dpWurwrJZep6xO5qUsDwvzcqzk4EZETUxJIRERERETkdDkcED8PmvQDa+W3U6/P2YGHixN3942s5uBERE5OSSAREREREZHTtWcRFKRB9KBKlzfsz2R2bAoTezWmjqdLNQcnInJySgKJiIiIiIicrnWfqcXuggAAIABJREFUgXsdaDakwpJhGPxn1nYCPF2Y0KNRDQQnInJySgKJiIiIiIicjtwU2P47tB0Dzm4VlpfsSmPl7gzuuzwST1enGghQROTklAQSERERERE5HRu/AYcdOoyvsORwGLw6ezvh/u6M7ly/+mMTETkNSgKJiIiIiIicisMB67+Ahj0hMKrC8vzth9malMM/+kfj6mSrgQBFRE5NSSAREREREZFT2b0AMvdWWgUEMG1DIgGeLlzTNrRawxIRORNKAomIiIiIiJzKus/AIwCaD62wlFNUytxthxnaJhQnm26xRKT20juUiIiIiIjIyRRkwI4/oM1ocHKtsDxrSzIldgfD2oXVQHAiIqdPSSAREREREZGT2TnbbAgdM6LS5ekbkmgU6EmbcN9qDkxE5MwoCSQiIiIiInIy22eAdyiEtquwdDCrkJV70hnWNgyLxVIDwYmInD4lgURERERERE6kJB/i50HzIWCtePv066aDGAYMa6eG0CJS+ykJJCIiIiIiciLx88BeCM2GVLr884Yk2tX3o0GAZzUHJiJy5pQEEhEREREROZHtM8DdHxp0r7C07VAO25NzGa6G0CJygVASSEREREREpDL2Etg5C5peBTanCss/b0zCyWphcKt6NRCciMiZUxJIRERERESkMnuXQFE2NB9aYcnhMPhlw0F6RwcR4FVxbLyISG2kJJCIiIiIiEhlts8AZ09o3LfC0so96STnFDFMW8FE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ACTFhDI1vSu3j++t7cm/o9pVx67CCrLyKtiZX86O/HKqauvoFBNKp+gwOkWHkhjtfJ2SEEFM2JG/P4/HUlvn+XYto/awoLWIiIiIiIiIQqBWrLC8hheW7GTd3oMkRDnBRWpiFKN7xZOaEKmdqURERERERESk0Y4VAmnhEx+Ljwrlnin9fV2GiIiIiIiIiLRz2v5IRERERERERMQPKAQSEREREREREfEDCoFERERERERERPyAQiARERERERERET+gEEhERERERERExA8oBBIRERERERER8QMKgURERERERERE/IBCIBERERERERERP6AQSERERERERETEDygEEhERERERERHxAwqBRERERERERET8gEIgERERERERERE/oBBIRERERERERMQPKAQSEREREREREfEDCoFERERERERERPyAQiARERERERERET+gEEhERERERERExA8oBBIRERERERER8QPGWuubho3JB7J90njzSwAKfF2EtFnqP9JU6kPSFOo/0lTqQ9IU6j/SVOpD0hTttf+kWGsTj3bCZyFQe2KMWWWtHe7rOqRtUv+RplIfkqZQ/5GmUh+SplD/kaZSH5Km8Mf+o+lgIiIiIiIiIiJ+QCGQiIiIiIiIiIgfUAjUPF7wdQHSpqn/SFOpD0lTqP9IU6kPSVOo/0hTqQ9JU/hd/9GaQCIiIiIiIiIifkAjgURERERERERE/IBCoCYwxkwyxmwzxuwwxvza1/VI22CM2WWM2WCMWWuMWeU91tEYs9AYs937uYOv65TWwxgz2xiTZ4zZWO/YUfuMcfzF+1xab4wZ6rvKpTVooP/8zhizz/scWmuMmVLv3D3e/rPNGHO+b6qW1sIY090Y85kxZrMxZpMx5r+8x/UMkkY5Rh/Sc0h+kDEmzBjzlTFmnbf/POA93tMYs9LbT94wxoR4j4d6v9/hPX+KL+sX3ztGH/qHMeabes+gdO/xdv8+phDoBBljAoFngcnAAOBKY8wA31YlbcjZ1tr0etsR/hr41FrbB/jU+73IIf8AJn3nWEN9ZjLQx/sxE3iuhWqU1usffL//ADzpfQ6lW2sXAHjfx64ATvW+5q/e9zvxX27gF9baAcAo4HZvP9EzSBqroT4Eeg7JD6sBJlhrBwPpwCRjzCjgUZz+0xsoBm70Xn8jUOw9/qT3OvFvDfUhgLvrPYPWeo+1+/cxhUAnbgSww1q701pbC7wOTPVxTdJ2TQVe9n79MjDNh7VIK2OtXQIUfedwQ31mKvBP61gBxBljklumUmmNGug/DZkKvG6trbHWfgPswHm/Ez9lrc2x1n7t/boM2AJ0Rc8gaaRj9KGG6Dkk3/I+S8q93wZ7PywwAZjjPf7dZ9ChZ9Mc4BxjjGmhcqUVOkYfaki7fx9TCHTiugJ76n2/l2O/oYkcYoGPjTGrjTEzvceSrLU53q8PAEm+KU3akIb6jJ5N0lh3eIc5z643BVX9RxrknVYxBFiJnkFyAr7Th0DPIWkEY0ygMWYtkAcsBLKAg9Zat/eS+n3k2/7jPV8CxLdsxdLafLcPWWsPPYP+4H0GPWmMCfUea/fPIIVAIi3vTGvtUJyhhrcbY8bWP2mdLfu0bZ80mvqMnIDngF44w6JzgMd9W460dsaYKOBt4E5rbWn9c3oGSWMcpQ/pOSSNYq2ts9amA91wRoX183FJ0sZ8tw8ZY04D7sHpS6cDHYFf+bDEFqUQ6MTtA7rX+76b95jIMVlr93k/5wH/wXkzyz00zND7Oc93FUob0VCf0bNJfpC1Ntf7H0Qe4O8cnmqh/iPfY4wJxvnj/TVr7VzvYT2DpNGO1of0HJLjZa09CHwGnIEzRSfIe6p+H/m2/3jPxwKFLVyqtFL1+tAk71RVa62tAV7Cj55BCoFOXAbQx7syfQjOAnbzfVyTtHLGmEhjTPShr4HzgI04fed672XXA+/4pkJpQxrqM/OB67w7G4wCSupN2RABvv2j/ZCLcZ5D4PSfK7y7q/TEWRTxq5auT1oP71oas4At1ton6p3SM0gapaE+pOeQNIYxJtEYE+f9Ohw4F2ddqc+AS72XffcZdOjZdCmwyDtaUfxUA31oa73/I8PgrClV/xnUrt/Hgn74Ejkaa63bGHMH8BEQCMy21m7ycVnS+iUB//GuTxcE/Mta+6ExJgN40xhzI5ANXObDGqWVMcb8GxgPJBhj9gL3A49w9D6zAJiCs5BmJfDTFi9YWpUG+s9471aoFtgF3Axgrd1kjHkT2Iyzo8/t1to6X9QtrcYY4Fpgg3c9BYB70TNIGq+hPnSlnkPSCMnAy94d4gKAN6217xljNgOvG2MeAtbgBI14P79ijNmBsynCFb4oWlqVhvrQImNMImCAtcAt3uvb/fuYUTAqIiIiIiIiItL+aTqYiIiIiIiIiIgfUAgkIiIiIiIiIuIHFAKJiIiIiIiIiPgBhUAiIiIiIiIiIn5AIZCIiIiIiIiIiB9QCCQiIiIiIiIi4gcUAomIiIiIiIiI+AGFQCIiIiIiIiIifuD/Aeqh65HrEW6ZAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"faVgWpT1v6Qh"},"source":["class EnsembleLearners2(nn.Module):  #k2,k3\n","  def __init__(self,modelA,modelB,batch):\n","    super(EnsembleLearners2,self).__init__()\n","    self.batch=batch\n","    self.device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    \n","    self.lstm_hidden=4\n","    self.modelA = modelA\n","    self.modelB = modelB\n","\n","    \n","    self.dense1 = nn.Linear(in_features = 2,out_features= 32, bias = True)\n","    self.dense2 = nn.Linear(in_features = 32,out_features= 1, bias = True)\n","\n","    self.dropout = nn.Dropout(0.2)\n","    self.act = nn.Tanh()\n","\n","\n","  def forward(self,input):\n","    x1= self.modelA(input)\n","    x2 = self.modelB(input)\n","    x3 = torch.cat([x1,x2],dim=-1)\n","\n","    out = self.act(self.dropout(self.dense1(x3)))  \n","    out = self.dense2(out)\n","    \n","    \n","    return out\n","  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I5xaC7Ql6Ziz","executionInfo":{"status":"ok","timestamp":1629740741830,"user_tz":-330,"elapsed":668,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"79a74fe6-a755-45ba-94af-539bc8f1c1e0"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["torch.Size([32, 1])\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E4yxBEPV1DJX","executionInfo":{"status":"ok","timestamp":1629740775575,"user_tz":-330,"elapsed":407,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"a1fd29f3-0e13-4933-86ae-5e9c6bc086f4"},"source":["model2 = CNN_LSTM_2(32)\n","#model2.cuda()\n","model2.load_state_dict(torch.load(\"/content/drive/MyDrive/Models/Pytorch/m2.pth\",map_location=torch.device('cpu')))\n","model = CNN_LSTM_2v5(32)\n","#model.cuda()\n","model.load_state_dict(torch.load(\"/content/drive/MyDrive/Models/Pytorch/q1.pth\",map_location=torch.device('cpu')))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"hirE4qM9H3EM"},"source":["model3 = model\n","model4= model2\n","for para in model3.parameters():\n","  para.requires_grad = False\n","for para in model4.parameters():\n","  para.requires_grad = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a3zXMrH5XDrG"},"source":["ensemble2= EnsembleLearners2(model3,model4,1)\n","if torch.cuda.is_available():\n","  ensemble2.cuda()  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4tmScerTy6Y-","executionInfo":{"status":"ok","timestamp":1629741342216,"user_tz":-330,"elapsed":491756,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"031c7e97-dc73-4d3e-ea7f-62b4d9dca7fa"},"source":["#params trainable\n","EPOCHS = 50\n","path= \"/content/drive/MyDrive/Models/Pytorch/k3.pth\"\n","c_train ,c_val ,c_test = prepare(\"TATAMOTORS\",True,32)\n","\n","optimizer = torch.optim.Adamax(ensemble2.parameters(),lr =1e-3 )\n","loss_fn = tradeloss()\n","history = train(ensemble2, c_train,c_val,EPOCHS , optimizer,loss_fn,scheduler=None,\n","          name=\"model20v1.pth\", path=path)\n","ensemble2_2,l1,l2 = history"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r[*********************100%***********************]  1 of 1 completed\n","Index(['Open', 'High', 'Low', 'Close', 'Volume', 'HL_mid', 'OC_mid', 'RSI',\n","       'ATR', 'TR', 'ADX', 'Adj Close'],\n","      dtype='object')\n","[[0.11499185 0.11747375 0.11767422 ... 0.35203122 0.23694981 0.08553246]\n"," [0.11858637 0.12037593 0.11966056 ... 0.35459151 0.23772296 0.08780293]\n"," [0.12167667 0.12069839 0.11689624 ... 0.33732024 0.22888719 0.08310667]\n"," ...\n"," [0.48512412 0.48146202 0.48643732 ... 0.07472104 0.23924559 0.48276842]\n"," [0.47256255 0.46959873 0.46639739 ... 0.18330704 0.25048961 0.46535992]\n"," [0.46865829 0.46556011 0.45603191 ... 0.19763406 0.2675874  0.45491483]]\n","len x_train (5152, 20, 7), y_train 5152; x_val(544, 20, 7); y val 544 ; x test (608, 20, 7) y test 608\n","Epoch: 1/50\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"stream","text":["\t\tGoing for validation\n","\tTrain loss:40.179884.. \tValid Loss:29.253710..\n","\tValidation loss decreased (inf --> 29.253710).  Saving model ...\n","\tEpoch:1 completed in 0m 10s\n","Epoch: 2/50\n","\t\tGoing for validation\n","\tTrain loss:59.776842.. \tValid Loss:10.584840..\n","\tValidation loss decreased (29.253710 --> 10.584840).  Saving model ...\n","\tEpoch:2 completed in 0m 10s\n","Epoch: 3/50\n","\t\tGoing for validation\n","\tTrain loss:19.152661.. \tValid Loss:2.453663..\n","\tValidation loss decreased (10.584840 --> 2.453663).  Saving model ...\n","\tEpoch:3 completed in 0m 10s\n","Epoch: 4/50\n","\t\tGoing for validation\n","\tTrain loss:7.198558.. \tValid Loss:0.591284..\n","\tValidation loss decreased (2.453663 --> 0.591284).  Saving model ...\n","\tEpoch:4 completed in 0m 10s\n","Epoch: 5/50\n","\t\tGoing for validation\n","\tTrain loss:2.997641.. \tValid Loss:0.264632..\n","\tValidation loss decreased (0.591284 --> 0.264632).  Saving model ...\n","\tEpoch:5 completed in 0m 10s\n","Epoch: 6/50\n","\t\tGoing for validation\n","\tTrain loss:1.740046.. \tValid Loss:0.191375..\n","\tValidation loss decreased (0.264632 --> 0.191375).  Saving model ...\n","\tEpoch:6 completed in 0m 10s\n","Epoch: 7/50\n","\t\tGoing for validation\n","\tTrain loss:1.413149.. \tValid Loss:0.145929..\n","\tValidation loss decreased (0.191375 --> 0.145929).  Saving model ...\n","\tEpoch:7 completed in 0m 10s\n","Epoch: 8/50\n","\t\tGoing for validation\n","\tTrain loss:1.290342.. \tValid Loss:0.147585..\n","\tEpoch:8 completed in 0m 10s\n","Epoch: 9/50\n","\t\tGoing for validation\n","\tTrain loss:1.198042.. \tValid Loss:0.115337..\n","\tValidation loss decreased (0.145929 --> 0.115337).  Saving model ...\n","\tEpoch:9 completed in 0m 10s\n","Epoch: 10/50\n","\t\tGoing for validation\n","\tTrain loss:1.136818.. \tValid Loss:0.119235..\n","\tEpoch:10 completed in 0m 10s\n","Epoch: 11/50\n","\t\tGoing for validation\n","\tTrain loss:1.162280.. \tValid Loss:0.149896..\n","\tEpoch:11 completed in 0m 10s\n","Epoch: 12/50\n","\t\tGoing for validation\n","\tTrain loss:1.146001.. \tValid Loss:0.135851..\n","\tEpoch:12 completed in 0m 10s\n","Epoch: 13/50\n","\t\tGoing for validation\n","\tTrain loss:1.089485.. \tValid Loss:0.109104..\n","\tValidation loss decreased (0.115337 --> 0.109104).  Saving model ...\n","\tEpoch:13 completed in 0m 10s\n","Epoch: 14/50\n","\t\tGoing for validation\n","\tTrain loss:1.120097.. \tValid Loss:0.118016..\n","\tEpoch:14 completed in 0m 10s\n","Epoch: 15/50\n","\t\tGoing for validation\n","\tTrain loss:1.118382.. \tValid Loss:0.190886..\n","\tEpoch:15 completed in 0m 10s\n","Epoch: 16/50\n","\t\tGoing for validation\n","\tTrain loss:1.055282.. \tValid Loss:0.181484..\n","\tEpoch:16 completed in 0m 10s\n","Epoch: 17/50\n","\t\tGoing for validation\n","\tTrain loss:1.114908.. \tValid Loss:0.317226..\n","\tEpoch:17 completed in 0m 10s\n","Epoch: 18/50\n","\t\tGoing for validation\n","\tTrain loss:1.087835.. \tValid Loss:0.247764..\n","\tEpoch:18 completed in 0m 10s\n","Epoch: 19/50\n","\t\tGoing for validation\n","\tTrain loss:1.077922.. \tValid Loss:0.338659..\n","\tEpoch:19 completed in 0m 10s\n","Epoch: 20/50\n","\t\tGoing for validation\n","\tTrain loss:1.080004.. \tValid Loss:0.149205..\n","\tEpoch:20 completed in 0m 10s\n","Epoch: 21/50\n","\t\tGoing for validation\n","\tTrain loss:1.074212.. \tValid Loss:0.331369..\n","\tEpoch:21 completed in 0m 10s\n","Epoch: 22/50\n","\t\tGoing for validation\n","\tTrain loss:0.995045.. \tValid Loss:0.159811..\n","\tEpoch:22 completed in 0m 10s\n","Epoch: 23/50\n","\t\tGoing for validation\n","\tTrain loss:1.064093.. \tValid Loss:0.255499..\n","\tEpoch:23 completed in 0m 10s\n","Epoch: 24/50\n","\t\tGoing for validation\n","\tTrain loss:1.073264.. \tValid Loss:0.298181..\n","\tEpoch:24 completed in 0m 10s\n","Epoch: 25/50\n","\t\tGoing for validation\n","\tTrain loss:1.009384.. \tValid Loss:0.162605..\n","\tEpoch:25 completed in 0m 10s\n","Epoch: 26/50\n","\t\tGoing for validation\n","\tTrain loss:1.059992.. \tValid Loss:0.263062..\n","\tEpoch:26 completed in 0m 10s\n","Epoch: 27/50\n","\t\tGoing for validation\n","\tTrain loss:1.080562.. \tValid Loss:0.238138..\n","\tEpoch:27 completed in 0m 10s\n","Epoch: 28/50\n","\t\tGoing for validation\n","\tTrain loss:1.018807.. \tValid Loss:0.301688..\n","\tEpoch:28 completed in 0m 10s\n","Epoch: 29/50\n","\t\tGoing for validation\n","\tTrain loss:1.150268.. \tValid Loss:0.380688..\n","\tEpoch:29 completed in 0m 10s\n","Epoch: 30/50\n","\t\tGoing for validation\n","\tTrain loss:1.103088.. \tValid Loss:0.230468..\n","\tEpoch:30 completed in 0m 10s\n","Epoch: 31/50\n","\t\tGoing for validation\n","\tTrain loss:1.106605.. \tValid Loss:0.326551..\n","\tEpoch:31 completed in 0m 10s\n","Epoch: 32/50\n","\t\tGoing for validation\n","\tTrain loss:1.086188.. \tValid Loss:0.337980..\n","\tEpoch:32 completed in 0m 10s\n","Epoch: 33/50\n","\t\tGoing for validation\n","\tTrain loss:1.103841.. \tValid Loss:0.286000..\n","\tEpoch:33 completed in 0m 10s\n","Epoch: 34/50\n","\t\tGoing for validation\n","\tTrain loss:1.075847.. \tValid Loss:0.164948..\n","\tEpoch:34 completed in 0m 10s\n","Epoch: 35/50\n","\t\tGoing for validation\n","\tTrain loss:1.045740.. \tValid Loss:0.324031..\n","\tEpoch:35 completed in 0m 10s\n","Epoch: 36/50\n","\t\tGoing for validation\n","\tTrain loss:1.058462.. \tValid Loss:0.351504..\n","\tEpoch:36 completed in 0m 10s\n","Epoch: 37/50\n","\t\tGoing for validation\n","\tTrain loss:0.999710.. \tValid Loss:0.253663..\n","\tEpoch:37 completed in 0m 10s\n","Epoch: 38/50\n","\t\tGoing for validation\n","\tTrain loss:1.007858.. \tValid Loss:0.242452..\n","\tEpoch:38 completed in 0m 10s\n","Epoch: 39/50\n","\t\tGoing for validation\n","\tTrain loss:1.079950.. \tValid Loss:0.249214..\n","\tEpoch:39 completed in 0m 10s\n","Epoch: 40/50\n","\t\tGoing for validation\n","\tTrain loss:1.021250.. \tValid Loss:0.268056..\n","\tEpoch:40 completed in 0m 10s\n","Epoch: 41/50\n","\t\tGoing for validation\n","\tTrain loss:1.054538.. \tValid Loss:0.323429..\n","\tEpoch:41 completed in 0m 10s\n","Epoch: 42/50\n","\t\tGoing for validation\n","\tTrain loss:1.021728.. \tValid Loss:0.267598..\n","\tEpoch:42 completed in 0m 10s\n","Epoch: 43/50\n","\t\tGoing for validation\n","\tTrain loss:1.010681.. \tValid Loss:0.235955..\n","\tEpoch:43 completed in 0m 10s\n","Epoch: 44/50\n","\t\tGoing for validation\n","\tTrain loss:1.028379.. \tValid Loss:0.160601..\n","\tEpoch:44 completed in 0m 10s\n","Epoch: 45/50\n","\t\tGoing for validation\n","\tTrain loss:0.976659.. \tValid Loss:0.199235..\n","\tEpoch:45 completed in 0m 10s\n","Epoch: 46/50\n","\t\tGoing for validation\n","\tTrain loss:0.996801.. \tValid Loss:0.297158..\n","\tEpoch:46 completed in 0m 10s\n","Epoch: 47/50\n","\t\tGoing for validation\n","\tTrain loss:1.040551.. \tValid Loss:0.175425..\n","\tEpoch:47 completed in 0m 10s\n","Epoch: 48/50\n","\t\tGoing for validation\n","\tTrain loss:0.979013.. \tValid Loss:0.234361..\n","\tEpoch:48 completed in 0m 10s\n","Epoch: 49/50\n","\t\tGoing for validation\n","\tTrain loss:1.057645.. \tValid Loss:0.206572..\n","\tEpoch:49 completed in 0m 10s\n","Epoch: 50/50\n","\t\tGoing for validation\n","\tTrain loss:1.075469.. \tValid Loss:0.249893..\n","\tEpoch:50 completed in 0m 10s\n","Training completed in 8m 11s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"MO5hicrn1Kh9","executionInfo":{"status":"ok","timestamp":1629741557368,"user_tz":-330,"elapsed":1935,"user":{"displayName":"ShuvraNeel Roy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjANYVmLo_zt-mrVqbJH5tqTlykNEjoP2JtAN8Ybw=s64","userId":"06350349201381820342"}},"outputId":"d991b6ea-466d-4ec4-dc10-b45c1df55d25"},"source":["es = [ensemble2_2,ensemble]\n","plot_models(es,triv_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:19: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Vm2PKbyM34sB"},"source":[""],"execution_count":null,"outputs":[]}]}